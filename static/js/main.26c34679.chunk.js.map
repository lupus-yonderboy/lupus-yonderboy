{"version":3,"sources":["reducers.js","Container.js","Home.js","About.js","Header.js","actions.js","Post.js","fetchPostsAndAuthors.js","Posts.js","index.js","App.js"],"names":["initialState","posts","post","Container","children","className","Home","About","Header","setPosts","type","setPost","Post","this","props","Content","Component","connect","state","dispatch","fetchPostsAndAuthors","url","fetchPosts","fetch","then","res","json","fetchAuthors","Promise","all","postsRes","authorsRes","authors","author","Id","Name","push","_authorName","Author","associatePostsWithAuthors","Posts","loading","time","error","map","key","to","onClick","Title","hasOwnProperty","slice","length","setState","timer","setTimeout","catch","finally","renderPosts","rootElement","document","getElementById","store","createStore","action","Object","assign","ReactDOM","render","exact","path","component"],"mappings":"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","file":"static/js/main.26c34679.chunk.js","sourcesContent":["const initialState = {\n  posts: [],\n  post: {},\n};\n\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_POSTS':\n      return Object.assign({}, state, { posts: action.posts });\n    case 'SET_POST':\n      return Object.assign({}, state, { post: action.post });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\n\nimport './Container.css';\n\nexport const Container = ({ children }) => {\n  return (\n    <div className='container'>\n      <div>\n        {children}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Container } from './Container';\n\nexport const Home = () => {\n  return (\n    <Container>\n      Hi.\n    </Container>\n  );\n};\n","import React from 'react';\n\nimport { Container } from './Container';\n\nexport const About = () => {\n  return (\n    <Container>\n      \"Chaos, Mr. Who,\" Lupus Yonderboy said. \"That is our mode and modus. That is our central kick.\"\n    </Container>\n  );\n};\n","import React from 'react';\n\nimport './Header.css';\n\nexport const Header = ({ children }) => {\n  return (\n    <div className='header'>\n        {children}\n    </div>\n  );\n};\n","export const setPosts = (posts) => ({\n  type: 'SET_POSTS',\n  posts\n});\n\nexport const setPost = (post) => ({\n  type: 'SET_POST',\n  post\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { Container } from './Container';\n\nimport {\n  setPosts,\n  setPost\n} from './actions';\n\nclass Post extends Component {\n  componentDidMount() {\n    if (this.props.post) {\n      return;\n    }\n\n    if (this.props.posts) {\n      debugger;\n      return;\n    }\n\n\n  }\n\n  render() {\n    return (\n      <Container>\n        {this.props.post.Content}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  posts: state.posts,\n  post: state.post,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPosts: (posts) => {\n    return dispatch(setPosts(posts));\n  },\n  setPost: (post) => {\n    return dispatch(setPost(post));\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Post);\n","export const fetchPostsAndAuthors = () => {\n  const environment = process.env.NODE_ENV || 'production';\n  const url = environment === 'production'\n    ? 'https://lupus-yonderboy-go-env.wv5mqwfbqj.us-east-1.elasticbeanstalk.com/'\n    : 'http://localhost:5000/';\n\n  const fetchPosts = fetch(url + 'posts')\n    .then((res) => res.json());\n\n  const fetchAuthors = fetch(url + 'authors')\n    .then((res) => res.json());\n\n  const associatePostsWithAuthors = ({ postsRes, authorsRes }) => {\n    const authors = {};\n    const posts = [];\n    for (let author of authorsRes) {\n      authors[author.Id] = author.Name;\n    }\n    for (let post of postsRes) {\n      posts.push({\n        _authorName: authors[post.Author],\n        ...post,\n      });\n    }\n    return posts;\n  };\n\n  const fetchAll = () => Promise.all([fetchPosts, fetchAuthors])\n    .then((res) => {\n      return associatePostsWithAuthors({\n          postsRes: res[0],\n          authorsRes: res[1],\n        });\n      });\n\n  return fetchAll();\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Container } from './Container';\nimport './Posts.css';\n\nimport {\n  setPosts,\n  setPost\n} from './actions';\nimport { fetchPostsAndAuthors } from './fetchPostsAndAuthors';\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: null,\n      time: null,\n      error: null,\n    };\n  }\n\n  setPost(post) {\n    this.props.setPost(post);\n  }\n\n  renderPosts(posts) {\n    return posts.map((post) => {\n      return (\n        <div key={post.Id}>\n          <Link\n            to={`/posts/${post.Id}`}\n            onClick={() => this.setPost(post)}\n            className=\"title\"\n          >{post.Title}</Link>\n          <div className=\"author\">\n            {post.hasOwnProperty('_authorName')\n                ? post._authorName\n                : '?'}\n          </div>\n          <div className=\"content\">\n            {post.Content.slice(0, 230) + ' ...'}\n          </div>\n        </div>\n      );\n    });\n  }\n\n  componentDidMount() {\n    const timer = (time) => {\n      setTimeout(() => {\n        if (this.state.loading) {\n          time += 10;\n          this.setState({ time: time });\n          timer(time);\n        }\n      }, 10);\n    };\n\n    if (this.props.posts.length) {\n      return;\n    }\n\n    this.setState({ loading: true });\n    timer(0);\n\n    fetchPostsAndAuthors()\n      .then((posts) => {\n        this.props.setPosts(posts);\n      })\n      .catch(() => {\n        this.setState({ error: ':(' });\n      })\n      .finally(() => {\n        this.setState({ loading: false });\n      })\n  } // end componentDidMount\n\n  render() {\n    return (\n      <Container>\n        {this.state.loading\n            ? this.state.time\n            : this.state.error}\n        {this.renderPosts(this.props.posts)}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  posts: state.posts,\n  post: state.post,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPosts: (posts) => {\n    return dispatch(setPosts(posts));\n  },\n  setPost: (post) => {\n    return dispatch(setPost(post));\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Posts);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { reducers } from './reducers';\n// import * as serviceWorker from './serviceWorker';\n\nimport { App } from './App';\n\nconst rootElement = document.getElementById('root');\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <App store={store} />,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from 'react';\nimport { Route, Link, Switch, HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { Home } from './Home';\nimport { About } from './About';\nimport { Header } from './Header';\nimport Post from './Post';\nimport Posts from './Posts';\n\nimport './App.css';\n\nexport const App = (props) => {\n  return (\n    <Provider store={props.store}>\n      <Router>\n        <Header>\n          <div>\n            <span className='header-span'>\n              <Link to='/' className='header-link'>\n                HOME\n              </Link>\n            </span>\n            <span className='header-span'>\n              <Link to='/about' className='header-link'>\n                ABOUT\n              </Link>\n            </span>\n            <span className='header-span'>\n              <Link to='/posts' className='header-link'>\n                POSTS\n              </Link>\n            </span>\n          </div>\n        </Header>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/about' component={About} />\n          <Route path='/posts/:postId' component={Post} />\n          <Route path='/posts' component={Posts} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n};\n"],"sourceRoot":""}